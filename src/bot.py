import logging
import os

import vk_api
from dotenv import load_dotenv
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id

from src.db import queries
from src.db.db_session import Session
from src.db.queries import (
    add_favorite, remove_favorite, get_favorites_for_user
)
from src.db.vkinder_models import Favorites
from src.vk_api_handler import VKAPIHandler

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class VKinderBot:
    def __init__(self, group_token: str, group_id: int):
        self.vk_session = vk_api.VkApi(token=group_token)
        self.api = self.vk_session.get_api()
        self.longpoll = VkBotLongPoll(self.vk_session, group_id=group_id)
        self.vk_handler = VKAPIHandler(group_token, group_id)
        self.current_candidates = {}  # {user_id: [candidates]}
        self.current_index = {}  # {user_id: current_index}

    def send_message(self, user_id: int, message: str, keyboard=None, attachments=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ VK API.

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard (VkKeyboard, optional): –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
            attachments (str, optional): –í–ª–æ–∂–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã)

        Note:
            –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        params = {
            'user_id': user_id,
            'message': message,
            'random_id': get_random_id(),
        }
        if keyboard:
            params['keyboard'] = keyboard.get_keyboard()
        if attachments:
            params['attachment'] = attachments

        try:
            self.api.messages.send(**params)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def create_main_keyboard(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞ —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.

        Returns:
            VkKeyboard: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏:
                - –ù–∞–π—Ç–∏ –ø–∞—Ä—É
                - –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
                - –ü–æ–º–æ—â—å
        """
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button('–ù–∞–π—Ç–∏ –ø–∞—Ä—É', VkKeyboardColor.PRIMARY)
        keyboard.add_button('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–ü–æ–º–æ—â—å', VkKeyboardColor.POSITIVE)
        return keyboard

    def create_candidate_keyboard(self, candidate_id: int):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º.

        Args:
            candidate_id (int): ID —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)

        Returns:
            VkKeyboard: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏:
                - –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                - –í —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                - –õ–∞–π–∫ —Ñ–æ—Ç–æ
                - –°–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç
        """
        keyboard = VkKeyboard(inline=True)

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        keyboard.add_button('‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('üëé –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', color=VkKeyboardColor.NEGATIVE)

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        keyboard.add_line()
        keyboard.add_button('üëç –õ–∞–π–∫ —Ñ–æ—Ç–æ', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π', color=VkKeyboardColor.SECONDARY)

        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
        if os.getenv("DEBUG") == "True":
            keyboard.add_line()
            keyboard.add_button(f'ID: {candidate_id}', color=VkKeyboardColor.SECONDARY)

        return keyboard

    def handle_start(self, user_id: int):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –æ—Ç–ø—Ä–∞–≤–ª—è—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ –±–æ—Ç–∞
        """
        message = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç VKinder –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–∞—Ä—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            "‚Ä¢ –ù–∞–π—Ç–∏ –ø–∞—Ä—É - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n"
            "‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n"
            "‚Ä¢ –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        self.send_message(user_id, message, self.create_main_keyboard())

    def handle_help(self, user_id: int):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—è –Ω–∞ handle_start.

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ –ø–æ–º–æ—â—å
        """
        self.handle_start(user_id)

    def handle_find_pair(self, user_id: int):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫:
        1. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –ò—â–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ VK API
        3. –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
        4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞

        Args:
            user_id (int): VK ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –ø–æ–∏—Å–∫

        Side effects:
            - –û–±–Ω–æ–≤–ª—è–µ—Ç self.current_candidates
            - –û–±–Ω–æ–≤–ª—è–µ—Ç self.current_index
            - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –ë–î
            with Session() as session:
                blacklist = queries.get_blacklist(session, user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º queries

            vk_user = self.vk_handler.get_user_info(user_id)
            if not vk_user:
                self.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
                return

            candidates = self.vk_handler.find_potential_matches(vk_user)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
            candidates = [c for c in candidates if c.id not in blacklist]

            if not candidates:
                self.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                return

            self.current_candidates[user_id] = candidates
            self.current_index[user_id] = 0
            self.show_current_candidate(user_id)

        except Exception as e:
            logger.error(f"Search error: {e}")
            self.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

    def show_current_candidate(self, user_id: int):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å —Ñ–æ—Ç–æ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.

        Args:
            user_id (int): VK ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Workflow:
            1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            2. –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-3 —Ñ–æ—Ç–æ
            3. –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å:
               - –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
               - –ü—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
               - –°—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
            4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π

        Note:
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã:
            - get_top_photos
            - prepare_attachments
            - calculate_match_score
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            if user_id not in self.current_candidates or user_id not in self.current_index:
                self.send_message(user_id, "–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.", self.create_main_keyboard())
                return

            index = self.current_index[user_id]
            candidates = self.current_candidates[user_id]

            if index >= len(candidates):
                self.send_message(user_id, "–ë–æ–ª—å—à–µ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", self.create_main_keyboard())
                return

            candidate = candidates[index]

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ (–∞–≤–∞—Ç–∞—Ä–∫–∏ + —Ñ–æ—Ç–æ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏)
            photos = self.vk_handler.get_top_photos(candidate.id)
            attachments = self.vk_handler.prepare_attachments(photos) if photos else None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –ë–î
            db_candidate = {
                "budding_id": candidate.id,
                "first_name": candidate.first_name,
                "last_name": candidate.last_name,
                "gender": "male" if candidate.sex == 2 else "female",
                "age": candidate.age,
                "url_profile": candidate.profile_url,
                "city": candidate.city
            }

            with Session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                blacklist = queries.get_blacklist(session, user_id)
                if candidate.id in blacklist:
                    self.current_index[user_id] += 1
                    return self.show_current_candidate(user_id)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                budding = queries.add_budding(session, db_candidate)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
                for i, photo in enumerate(photos):
                    queries.add_budding_photo(session, {
                        "budding_id": budding.budding_id,
                        "photo_vk": photo.attachment_str,
                        "likes_count": photo.likes,
                        "rank_photo": i + 1
                    })

            # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
            common_groups = self.get_common_groups(user_id, candidate.id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            match_score = self.calculate_match_score(user_id, candidate.id, common_groups)
            message = (
                f"üë§ {candidate.first_name} {candidate.last_name}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {candidate.age or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {candidate.city or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üë• –û–±—â–∏–µ –≥—Ä—É–ø–ø—ã: {common_groups}\n"
                f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {candidate.profile_url}\n"
                f"üíò –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {match_score:.0%}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            self.send_message(
                user_id,
                message,
                keyboard=self.create_candidate_keyboard(candidate.id),
                attachments=attachments
            )

        except Exception as e:
            logger.error(f"Show candidate error: {e}")
            self.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã", self.create_main_keyboard())

    def get_common_groups(self, user_id: int, candidate_id: int) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –≥—Ä—É–ø–ø –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º.

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            candidate_id (int): ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –≥—Ä—É–ø–ø (0 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_groups = set(self.vk_handler.api.groups.get(user_id=user_id)['items'])
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            candidate_groups = set(self.vk_handler.api.groups.get(user_id=candidate_id)['items'])
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –≥—Ä—É–ø–ø
            return len(user_groups & candidate_groups)
        except Exception as e:
            logger.error(f"Error getting common groups: {e}")
            return 0

    def calculate_match_score(self, user_id: int, candidate_id: int, common_groups: int) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º.

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            candidate_id (int): ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            common_groups (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –≥—Ä—É–ø–ø

        Returns:
            float: –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (0.0-1.0)
        """
        with Session() as session:
            user = queries.get_user_by_id(session, user_id)
            candidate = queries.get_budding_by_id(session, candidate_id)

            if not user or not candidate:
                return 0.0

            score = 0.0
            weights = {'age': 0.4, 'city': 0.3, 'groups': 0.3}

            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            if user.age and candidate.age:
                age_diff = min(abs(user.age - candidate.age), 10)
                score += weights['age'] * (1 - age_diff / 10)

            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥—É
            if user.city and candidate.city and user.city.lower() == candidate.city.lower():
                score += weights['city']

            # –û–±—â–∏–µ –≥—Ä—É–ø–ø—ã
            score += weights['groups'] * min(common_groups / 10, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 1.0

            return min(score, 1.0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 100%

    def handle_next_candidate(self, user_id: int):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ.

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Note:
            –û–±–Ω–æ–≤–ª—è–µ—Ç current_index –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        """
        if user_id in self.current_index:
            self.current_index[user_id] += 1
            self.show_current_candidate(user_id)

    def handle_add_to_favorites(self, user_id: int):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id (int): VK ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ

        Workflow:
            1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            3. –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Favorites
            4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Raises:
            Exception: –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î

        Side Effects:
            - –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É Favorites
            - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            - –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –≤ –∂—É—Ä–Ω–∞–ª

        Example:
            >>> bot.handle_add_to_favorites(123456)
            [–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"]
        """
        try:
            with Session() as session:
                if user_id not in self.current_candidates or user_id not in self.current_index:
                    self.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
                    return

                index = self.current_index[user_id]
                candidate = self.current_candidates[user_id][index]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                existing = session.query(Favorites).filter(
                    Favorites.user_id == user_id,
                    Favorites.budding_id == candidate.id
                ).first()

                if existing:
                    self.send_message(user_id, "–≠—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                fav = add_favorite(session, user_id, candidate.id)
                session.commit()

                self.send_message(
                    user_id,
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {candidate.first_name} {candidate.last_name}",
                    self.create_candidate_keyboard(candidate.id)
                )

        except Exception as e:
            logger.error(f"Favorite add error: {e}")
            self.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")

    def handle_show_favorites(self, user_id: int):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Workflow:
            1. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –ë–î
            2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

        Note:
            –ï—Å–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        with Session() as session:
            favorites = get_favorites_for_user(session, user_id)

        if not favorites:
            self.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.", self.create_main_keyboard())
            return

        message = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:\n\n"
        for fav in favorites:
            message += (
                f"{fav.first_name} {fav.last_name}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {fav.age}\n"
                f"–ì–æ—Ä–æ–¥: {fav.city}\n"
                f"–°—Å—ã–ª–∫–∞: {fav.url_profile}\n\n"
            )

        self.send_message(user_id, message, self.create_favorites_keyboard())

    def handle_remove_from_favorites(self, user_id: int):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.

        –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ

        Workflow:
            1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            2. –£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∫–∞–Ω–¥–∏–¥–∞—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Favorites
            3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ

        Note:
            –í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å:
            - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        """
        if user_id in self.current_candidates and user_id in self.current_index:
            index = self.current_index[user_id]
            candidate = self.current_candidates[user_id][index]

            with Session() as session:
                removed = remove_favorite(session, user_id, candidate.id)

            if removed:
                self.send_message(user_id, "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", self.create_main_keyboard())
            else:
                self.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", self.create_main_keyboard())

    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.

        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç VK LongPoll API.

        Workflow:
            1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (MESSAGE_NEW):
               - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ handle_message
            3. –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

        Note:
            –†–∞–±–æ—Ç–∞–µ—Ç –¥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞ MESSAGE_NEW.
        """
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        for event in self.longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                self.handle_message(event)

    def create_favorites_keyboard(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏.

        Returns:
            VkKeyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
                - –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                - –ù–∞–∑–∞–¥ (–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
        """
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button('–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', VkKeyboardColor.NEGATIVE)
        keyboard.add_button('–ù–∞–∑–∞–¥', VkKeyboardColor.SECONDARY)
        return keyboard

    def handle_message(self, event):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.

        Args:
            event (VkBotMessageEvent): –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            - –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: ['–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']
            - –ü–æ–º–æ—â—å: ['–ø–æ–º–æ—â—å', 'help']
            - –ü–æ–∏—Å–∫ –ø–∞—Ä: ['–Ω–∞–π—Ç–∏ –ø–∞—Ä—É', '–ø–æ–∏—Å–∫']
            - –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: ['–∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'favorites']
            - –î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ (–∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫):
                ‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                üëé –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                üëç –õ–∞–π–∫ —Ñ–æ—Ç–æ
                ‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π
            - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º: '—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
            - –ù–∞–≤–∏–≥–∞—Ü–∏—è: ['–Ω–∞–∑–∞–¥', '–æ—Ç–º–µ–Ω–∞']

        Note:
            –î–ª—è –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –ø–æ–º–æ—â–∏.
            –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
        """
        user_id = event.obj.message['from_id']
        text = event.obj.message['text'].lower()

        if text in ['–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
            self.handle_start(user_id)
        elif text in ['–ø–æ–º–æ—â—å', 'help']:
            self.handle_help(user_id)
        elif text in ['–Ω–∞–π—Ç–∏ –ø–∞—Ä—É', '–ø–æ–∏—Å–∫']:
            self.handle_find_pair(user_id)
        elif text in ['–∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'favorites']:
            self.handle_show_favorites(user_id)
        elif text == '‚ù§Ô∏è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
            self.handle_add_to_favorites(user_id)
        elif text == 'üëé —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫':
            self.handle_blacklist(user_id)
        elif text == 'üëç –ª–∞–π–∫ —Ñ–æ—Ç–æ':
            self.handle_like_photo(user_id)
        elif text in ['‚û°Ô∏è —Å–ª–µ–¥—É—é—â–∏–π', '–¥–∞–ª—å—à–µ']:
            self.handle_next_candidate(user_id)
        elif text == '—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ':
            self.handle_remove_from_favorites(user_id)
        elif text in ['–Ω–∞–∑–∞–¥', '–æ—Ç–º–µ–Ω–∞']:
            self.handle_start(user_id)
        else:
            self.send_message(
                user_id,
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø–æ–º–æ—â—å'.",
                self.create_main_keyboard()
            )

    def handle_blacklist(self, user_id: int):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Warning:
            –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ,
            –Ω–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –ë–î –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

        Side effects:
            - –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É Blacklist
            - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        if user_id not in self.current_candidates:
            return

        candidate = self.current_candidates[user_id][self.current_index[user_id]]
        with Session() as session:
            queries.add_to_blacklist(session, user_id, candidate.id)
        self.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {candidate.first_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")

    def handle_like_photo(self, user_id: int):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–∞–π–∫ —Ñ–æ—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å

        Workflow:
            1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            2. –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø —Ñ–æ—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            3. –°—Ç–∞–≤–∏—Ç –ª–∞–π–∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
            4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ

        Note:
            –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        if user_id not in self.current_candidates or user_id not in self.current_index:
            self.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
            return

        index = self.current_index[user_id]
        candidate = self.current_candidates[user_id][index]

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        with Session() as session:
            photos = queries.get_top_photos_for_budding(session, candidate.id)
            if not photos:
                self.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –ª–∞–π–∫–∞.")
                return

            # –õ–∞–π–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä)
            photo = photos[0]
            if self.vk_handler.like_photo(photo.photo_id, photo.budding_id):
                self.send_message(user_id, "–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!", self.create_candidate_keyboard(candidate.id))
            else:
                self.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫.")
