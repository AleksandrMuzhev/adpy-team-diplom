import logging
import os

import vk_api
from dotenv import load_dotenv
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id

from src.db import queries
from src.db.db_session import Session
from src.db.queries import (
    add_favorite, remove_favorite, get_favorites_for_user
)
from src.db.vkinder_models import Favorites
from src.vk_api_handler import VKAPIHandler, safe_decode, safe_str

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class VKinderBot:
    def __init__(self, vk_handler: VKAPIHandler, group_id: int):
        self.vk_handler = vk_handler
        self.group_id = group_id
        self.vk_session = vk_handler.vk_session
        self.api = vk_handler.api
        self.longpoll = vk_handler.longpoll
        self.current_candidates = {}  # {user_id: [candidates]}
        self.current_index = {}  # {user_id: current_index}

    def run(self):
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        try:
            for event in self.longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    self.handle_message(event)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ run: {safe_str(e)}")

    def send_message(self, user_id: int, message: str, keyboard=None, attachments=None):
        params = {
            'user_id': user_id,
            'message': message,
            'random_id': get_random_id(),
        }
        if keyboard:
            params['keyboard'] = keyboard.get_keyboard()
        if attachments:
            params['attachment'] = attachments

        try:
            self.api.messages.send(**params)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {safe_str(e)}")

    def create_main_keyboard(self):
        try:
            keyboard = VkKeyboard(one_time=False)
            keyboard.add_button('–ù–∞–π—Ç–∏ –ø–∞—Ä—É', VkKeyboardColor.PRIMARY)
            keyboard.add_button('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', VkKeyboardColor.SECONDARY)
            keyboard.add_line()
            keyboard.add_button('–ü–æ–º–æ—â—å', VkKeyboardColor.POSITIVE)
            return keyboard
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {safe_str(e)}")

    def create_candidate_keyboard(self, candidate_id: int):
        try:
            keyboard = VkKeyboard(inline=True)
            keyboard.add_button('‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', color=VkKeyboardColor.POSITIVE)
            keyboard.add_button('üëé –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', color=VkKeyboardColor.NEGATIVE)
            keyboard.add_line()
            keyboard.add_button('üëç –õ–∞–π–∫ —Ñ–æ—Ç–æ', color=VkKeyboardColor.PRIMARY)
            keyboard.add_button('üëé –£–±—Ä–∞—Ç—å –ª–∞–π–∫', color=VkKeyboardColor.SECONDARY)
            keyboard.add_button('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π', color=VkKeyboardColor.SECONDARY)
            if os.getenv("DEBUG") == "True":
                keyboard.add_line()
                keyboard.add_button(f'ID: {candidate_id}', color=VkKeyboardColor.SECONDARY)
            return keyboard
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {safe_str(e)}")

    def handle_start(self, user_id: int):
        try:
            message = (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç VKinder –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–∞—Ä—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
                "‚Ä¢ –ù–∞–π—Ç–∏ –ø–∞—Ä—É - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n"
                "‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n"
                "‚Ä¢ –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
            self.send_message(user_id, message, self.create_main_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {safe_str(e)}")

    def handle_help(self, user_id: int):
        try:
            self.handle_start(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_help: {safe_str(e)}")

    def handle_find_pair(self, user_id: int):
        try:
            with Session() as session:
                blacklist_raw = queries.get_blacklist(session, user_id)
                blacklist = []
                for item in blacklist_raw:
                    if isinstance(item, bytes):
                        decoded_item = safe_decode(item)
                        blacklist.append(decoded_item)
                    else:
                        blacklist.append(str(item))
            vk_user = self.vk_handler.get_user_info(user_id)
            if not vk_user:
                self.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
                return
            candidates = self.vk_handler.find_potential_matches(vk_user)
            candidates = [c for c in candidates if str(c.id) not in blacklist]
            if not candidates:
                self.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                return
            self.current_candidates[user_id] = candidates
            self.current_index[user_id] = 0
            self.show_current_candidate(user_id)
        except Exception as e:
            logger.error(f"Search error: {safe_str(e)}")
            self.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

    def handle_show_favorites(self, user_id: int):
        try:
            with Session() as session:
                favorites = get_favorites_for_user(session, user_id)
            if not favorites:
                self.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.", self.create_main_keyboard())
                return
            message = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:\\n\\n"
            for fav in favorites:
                message += (
                    f"{fav.first_name} {fav.last_name}\\n"
                    f"–í–æ–∑—Ä–∞—Å—Ç: {fav.age}\\n"
                    f"–ì–æ—Ä–æ–¥: {fav.city}\\n"
                    f"–°—Å—ã–ª–∫–∞: {fav.url_profile}\\n\\n"
                )
            self.send_message(user_id, message, self.create_favorites_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_show_favorites: {safe_str(e)}")
            self.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.", self.create_main_keyboard())

    def handle_add_to_favorites(self, user_id: int):
        try:
            with Session() as session:
                if user_id not in self.current_candidates or user_id not in self.current_index:
                    self.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
                    return
                index = self.current_index[user_id]
                candidate = self.current_candidates[user_id][index]
                existing = session.query(Favorites).filter(
                    Favorites.user_id == user_id,
                    Favorites.budding_id == candidate.id
                ).first()
                if existing:
                    self.send_message(user_id, "–≠—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
                    return
                fav = add_favorite(session, user_id, candidate.id)
                session.commit()
                self.send_message(user_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {candidate.first_name} {candidate.last_name}", self.create_candidate_keyboard(candidate.id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_add_to_favorites: {safe_str(e)}")
            self.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")



    def handle_message(self, event):
        try:
            user_id = event.obj.message['from_id']
            text = event.obj.message['text'].lower()

            if text in ['–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
                self.handle_start(user_id)
            elif text in ['–ø–æ–º–æ—â—å', 'help']:
                self.handle_help(user_id)
            elif text in ['–Ω–∞–π—Ç–∏ –ø–∞—Ä—É', '–ø–æ–∏—Å–∫']:
                self.handle_find_pair(user_id)
            elif text in ['–∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'favorites']:
                self.handle_show_favorites(user_id)
            elif text == '‚ù§Ô∏è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
                self.handle_add_to_favorites(user_id)
            elif text == 'üëé —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫':
                self.handle_blacklist(user_id)
            elif text == 'üëç –ª–∞–π–∫ —Ñ–æ—Ç–æ':
                self.handle_like_photo(user_id)
            elif text == 'üëé —É–±—Ä–∞—Ç—å –ª–∞–π–∫':
                self.handle_unlike_photo(user_id)
            elif text in ['‚û°Ô∏è —Å–ª–µ–¥—É—é—â–∏–π', '–¥–∞–ª—å—à–µ']:
                self.handle_next_candidate(user_id)
            elif text == '—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ':
                self.handle_remove_from_favorites(user_id)
            elif text in ['–Ω–∞–∑–∞–¥', '–æ—Ç–º–µ–Ω–∞']:
                self.handle_start(user_id)
            else:
                self.send_message(user_id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø–æ–º–æ—â—å'.", self.create_main_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {safe_str(e)}")
